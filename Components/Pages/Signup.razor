@page "/signup"
@rendermode InteractiveServer
@using LiveWeather.Services
@using LiveWeather.DatabaseController
@inject NavigationManager NavigationManager
@inject DatabaseController db
@using LiveWeather.Models
@using LiveWeather.Singletons
@inject UserStateManager UserState
@inject IAuthService supabase

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Elevation="4" Class="p-4">
        <MudTypography Variant="h5" Align="Center">Sign Up</MudTypography>

        <MudTextField 
            Label="Email" 
            @bind-Value="email" 
            Placeholder="Enter email" 
            Type="email" 
            Required="true" />

        <div class="d-flex mt-2">
            <MudTextField 
                @bind-Value="password" 
                Label="Password" 
                Variant="Variant.Text" 
                InputType="@PasswordInput" 
                Adornment="Adornment.End" 
                AdornmentIcon="@PasswordInputIcon" 
                OnAdornmentClick="TogglePasswordVisibility" 
                AdornmentAriaLabel="Show Password" 
                Placeholder="Enter password" 
                Required="true" />
        </div>

        <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Class="mt-4" @onclick="SignupUser">
            Sign Up
        </MudButton>

        <MudTypography Align="Center" Class="mt-2">
            Already have an account? <MudNavLink Href="/login" Color="Color.Primary">Login here</MudNavLink>
        </MudTypography>
    </MudPaper>
</MudContainer>

@code {
    private string email = "";
    private string password = "";

    bool isShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShow = !isShow;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private async Task SignupUser()
    {
        User user = new User(email, password, []);

        User newUser = await db.CreateAccount(user);
        await supabase.SignUp(email, password);
            NavigationManager.NavigateTo("/check");


    }
}
