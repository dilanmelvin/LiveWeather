@page "/login"
@rendermode InteractiveServer
@using LiveWeather.Services
@using LiveWeather.DatabaseController
@inject NavigationManager NavigationManager
@inject DatabaseController db
@using LiveWeather.Models
@using LiveWeather.Singletons
@inject UserStateManager UserState
@inject IAuthService supabase

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Elevation="4" Class="p-4">
        <MudTypography Variant="h5" Align="Center">Login</MudTypography>

        <MudTextField 
            Label="Email" 
            @bind-Value="email" 
            Placeholder="Enter email" 
            Type="email" 
            Required="true" />

        <div class="d-flex align-items-center mt-2">
            <MudTextField 
                @bind-Value="password" 
                Label="Password" 
                Variant="Variant.Text" 
                InputType="@PasswordInputType" 
                Adornment="Adornment.End" 
                AdornmentIcon="@PasswordIcon" 
                OnAdornmentClick="TogglePasswordVisibility" 
                AdornmentAriaLabel="Show Password" 
                Placeholder="Enter password"
                Required="true" 
                FullWidth="true" />
        </div>

        <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Class="mt-3" @onclick="LoginUser">
            Login
        </MudButton>

        <MudTypography Align="Center" Class="mt-2">
            Don't have an account? <MudNavLink Href="/signup" Color="Color.Primary">Sign up here</MudNavLink>
        </MudTypography>

        @if (alertMessage != null)
        {
            <MudAlert Severity="alertSeverity" Class="mt-2">@alertMessage</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private string email = "";
    private string password = "";
    
    private bool isPasswordVisible = false;
    private InputType PasswordInputType => isPasswordVisible ? InputType.Text : InputType.Password;
    private string PasswordIcon => isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private string? alertMessage = null;
    private Severity alertSeverity;

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task LoginUser()
    {
        await supabase.SignIn(email, password);
        NavigationManager.NavigateTo("/check");
        // try
        // {
        //     User? newUser = await db.GetUserByEmail(email);

        //     if (newUser != null)
        //     {
        //         bool success = newUser.Password == password;
        //         if (success)
        //         {
        //             UserState.SetUser(newUser);
        //             NavigationManager.NavigateTo("/Check");

        //             alertMessage = "Login successful!";
        //             alertSeverity = Severity.Success;
        //         }
        //         else
        //         {
        //             alertMessage = "Incorrect password.";
        //             alertSeverity = Severity.Error;
        //         }
        //     }
        //     else
        //     {
        //         alertMessage = "User not found.";
        //         alertSeverity = Severity.Warning;
        //     }
        // }
        // catch (Exception ex)
        // {
        //     alertMessage = "An error occurred: " + ex.Message;
        //     alertSeverity = Severity.Error;
        // }
    }
}
    